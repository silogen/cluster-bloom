# Task ID: 4
# Title: Enhance Configuration Validation with Comprehensive Checks
# Status: in-progress
# Dependencies: 1
# Priority: medium
# Description: Implement robust validation logic to thoroughly check all configuration parameters and their interdependencies, ensuring correctness, completeness, and adherence to best practices.
# Details:
Develop a validation module that systematically verifies every configuration parameter used by the system. This should include type checking, value range enforcement, required field presence, and cross-parameter dependency validation (e.g., ensuring that if parameter A is set, parameter B must also be set, or that certain values are mutually exclusive). Integrate open-source tools such as Datree, kube-linter, or custom rule engines to automate best practice checks for Kubernetes YAML files and other configuration formats. Ensure the validation runs automatically during CI/CD pipelines and as a pre-deployment step. Provide clear, actionable error messages for any validation failures. Document all validation rules and dependencies for maintainability and extensibility. Consider edge cases such as missing, malformed, or deprecated parameters, and ensure backward compatibility where necessary.

# Test Strategy:
1. Create a comprehensive suite of test configurations, including valid, invalid, incomplete, and conflicting parameter sets. 2. Run the validation logic against these configurations and verify that all errors, warnings, and passes are correctly identified. 3. Integrate the validation into the CI/CD pipeline and confirm that misconfigurations are caught before deployment. 4. Test cross-parameter dependencies by intentionally violating them and ensuring the validator reports the correct issues. 5. Review error messages for clarity and usefulness. 6. Validate that the system rejects configurations that do not meet the defined rules and accepts those that do.

# Subtasks:
## 1. Implement URL Validation Logic [pending]
### Dependencies: None
### Description: Add robust validation for all configuration parameters that require URLs, ensuring they are well-formed, reachable, and use allowed protocols.
### Details:
In the initConfig() function, implement checks for OIDC_URL, CLUSTERFORGE_RELEASE, ROCM_BASE_URL, and RKE2_INSTALLATION_URL. Use regex or a URL parsing library to verify format, and optionally attempt a HEAD request to check reachability. Provide clear error messages for malformed or unreachable URLs.

## 2. Add IP Address Validation [pending]
### Dependencies: 4.1
### Description: Ensure SERVER_IP and any other IP-related parameters are valid IPv4 or IPv6 addresses and not in reserved or disallowed ranges.
### Details:
Use a standard IP address validation library to check SERVER_IP. Reject invalid formats and reserved addresses (e.g., 0.0.0.0, 127.0.0.1 unless explicitly allowed). Provide actionable error messages.

## 3. Validate File Path Parameters [pending]
### Dependencies: 4.2
### Description: Check that all file path parameters (LONGHORN_DISKS, SELECTED_DISKS) exist, are accessible, and have the correct permissions.
### Details:
For each file path parameter, verify existence using filesystem checks, ensure the path is readable/writable as required, and confirm it is not a symlink to a restricted location. Return descriptive errors for missing or inaccessible paths.

## 4. Enforce Token Format Validation [pending]
### Dependencies: 4.3
### Description: Implement strict format checks for JOIN_TOKEN and ONEPASS_CONNECT_TOKEN, ensuring they match expected patterns and lengths.
### Details:
Define regex patterns or use parsing logic to validate token structure (e.g., alphanumeric, length constraints). Reject tokens that do not conform and provide specific feedback.

## 5. Validate Step Name Parameters [pending]
### Dependencies: None
### Description: Implement validation for DISABLED_STEPS and ENABLED_STEPS to ensure they reference valid step IDs
### Details:
- Check that DISABLED_STEPS and ENABLED_STEPS contain valid step IDs from the available steps
- Prevent invalid step names that would cause runtime errors
- Add helpful error messages for typos in step names

## 6. Detect Conflicting Configurations [pending]
### Dependencies: None
### Description: Add validation to detect and warn about conflicting configuration combinations
### Details:
- Check for conflicts like FIRST_NODE=false without SERVER_IP/JOIN_TOKEN
- Validate GPU_NODE vs ROCm requirements
- Ensure SKIP_DISK_CHECK consistency with disk-related parameters
- Add warnings for potentially problematic combinations

## 7. Validate Resource Requirements [pending]
### Dependencies: None
### Description: Implement validation for system resource requirements and compatibility
### Details:
- Validate partition sizes and disk space requirements
- Check for required system resources (memory, CPU)
- Verify Ubuntu version compatibility
- Add checks for required kernel modules and drivers

## 8. Integrate Validation System and Create Tests [pending]
### Dependencies: None
### Description: Integrate all validation functions into initConfig() and add comprehensive tests
### Details:
- Add all validation functions to initConfig() in proper order
- Ensure validation runs before any system modifications
- Create unit tests for all validation functions
- Add integration tests for configuration scenarios
- Document validation behavior and error messages

