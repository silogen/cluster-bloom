name: Build Prerelease
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  release:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      is_prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: 'false'
jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      extra_args: ${{ steps.version.outputs.extra_args }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Next Version
        if: github.event_name == 'workflow_dispatch'
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          maxTagsToFetch: 100
          skipInvalidTags: true
          patchAll: true

      - name: Calculate new version and args
        id: version
        run: |
          EXTRA_ARGS="--latest=false --prerelease"
          # For pull requests, use a test version
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            NEW_VERSION="pr-${{ github.head_ref }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.is_prerelease }}" == "true" ]]; then
              EXTRA_ARGS="--latest=false --prerelease"
            else
              EXTRA_ARGS="--latest=false"
            fi
            NEW_VERSION="${{ steps.semver.outputs.next }}"
          fi
          echo "Args: ${EXTRA_ARGS}"
          echo "New version: $NEW_VERSION"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "extra_args=${EXTRA_ARGS}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.new_version }}
          EXTRA_ARGS: ${{ steps.version.outputs.extra_args }}
        run: |
          gh release create "$VERSION" $EXTRA_ARGS \
              --title="ClusterBloom Release $VERSION" \
              --repo="$GITHUB_REPOSITORY" \
              --generate-notes || true # Ignore if release already exists
  build:
    needs: [version]
      runs-on: ubuntu-latest
      - name: Install devbox
        uses: jetify-com/devbox-install-action@v0.12.0

      - name: Build with devbox
        run: |
          echo devbox run build -ldflags="-X 'github.com/silogen/cluster-bloom/cmd.Version=pre-${GITHUB_HEAD_REF}'"
          echo cp dist/bloom dist/bloom-"${GITHUB_HEAD_REF}-${GITHUB_RUN_NUMBER}"
          devbox run build -ldflags="-X 'github.com/silogen/cluster-bloom/cmd.Version=pre-${GITHUB_HEAD_REF}'"
          cp dist/bloom dist/bloom-"${GITHUB_HEAD_REF}-${GITHUB_RUN_NUMBER}"
      
          files: dist/*      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.version.outputs.new_version }}
        run: |
          # Upload asset to the release
          gh release upload "$VERSION" \
              "dist/*" \
              --clobber

